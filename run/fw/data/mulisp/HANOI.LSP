; File:  HANOI.LSP  (c) 	05/26/87	Soft Warehouse, Inc.


;		* * *	The Tower of Hanoi Puzzle   * * *

(SETQ *HANOI-DELAY-TIME* 100)
(SETQ *SOUND-EFFECTS* '*SOUND-EFFECTS*)
(SETQ *COLOR-MONITOR* '*COLOR-MONITOR*)

(DEFUN HANOI (
    *RINGS* *HIGH-SPEED* *ROWS* MAX-RINGS
    PEG1-RINGS PEG2-RINGS PEG3-RINGS PEG1-COLUMN PEG2-COLUMN PEG3-COLUMN
    LINE *AUTO-NEWLINE* )
  (SETQ *BLOCK-CHAR* (PROGN
	  ((EQ (CSMEMORY 855) 2) (ASCII 219))
	  ((EQ (CSMEMORY 855) 9) (ASCII 135))
	  'X))
  (IF (EQ (CSMEMORY 855) 9)
      (MAPC 'WRITE-BYTE '(13 27 41 51)) )	;Activate graphics mode
  (SETQ *ROWS* (CADDR (MAKE-WINDOW)))
  ((< *ROWS* 5) NIL)
  (FOREGROUND-COLOR 7)
  (LOOP
    (CLEAR-SCREEN)
    (SETQ *HIGH-INTENSITY* T)
    (CENTER "T O W E R	 O F   H A N O I")
    (SETQ *HIGH-INTENSITY*)
    (CLEAR-INPUT)
    (TERPRI 3)
    (SETQ MAX-RINGS (MIN
	(TRUNCATE (SUB1 (TRUNCATE (CADDDR (MAKE-WINDOW)) 2)) 3)
	(- *ROWS* 4) ))
    (LOOP
      (WRITE-STRING (PACK* "	Rings (1 to " MAX-RINGS ")? "))
      (SETQ LINE (STRING-TRIM " " (READ-LINE)))
      ((EQ LINE "")
	(RETURN) )
      (SETQ *RINGS* (PARSE-INTEGER LINE))
      ((AND *RINGS* (<= 1 *RINGS* MAX-RINGS))) )
    (TERPRI)
    (SETQ *HIGH-SPEED* (NOT (Y-OR-N-P " Normal speed?")))
    ( ((AND (NOT *HIGH-SPEED*) (EQ *SOUND-EFFECTS* '*SOUND-EFFECTS*))
	(TERPRI)
	(SETQ *SOUND-EFFECTS* (Y-OR-N-P "Sound effects?")) ) )
    ( ((EQ *COLOR-MONITOR* '*COLOR-MONITOR*)
	(TERPRI)
	(SETQ *COLOR-MONITOR* (Y-OR-N-P "Color monitor?")) ) )
    (HANOI-DEMO)
    (SET-CURSOR 2 0)
    ((NOT (Y-OR-N-P "Run puzzle again?"))) )
  ((EQ (CSMEMORY 855) 9)
    (MAPC 'WRITE-BYTE '(13 27 41 48)) ) )	;Deactivate graphics mode

(DEFUN HANOI-DEMO ()
  (CURSOR-LINES 14 0)
  (CLEAR-SCREEN)
  (SETQ *HIGH-INTENSITY* T)
  (CENTER "T O W E R   O F   H A N O I")
  (SETQ *HIGH-INTENSITY*)
  (PUT 'PEG2 'COLUMN (TRUNCATE (CADDDR (MAKE-WINDOW)) 2))
  (PUT 'PEG1 'COLUMN (- (GET PEG2 'COLUMN) *RINGS* *RINGS* 1))
  (PUT 'PEG3 'COLUMN (+ (GET PEG2 'COLUMN) *RINGS* *RINGS* 1))
  (PRINT-PEG *RINGS* *ROWS* (GET 'PEG1 'COLUMN))
  (PRINT-PEG *RINGS* *ROWS* (GET 'PEG2 'COLUMN))
  (PRINT-PEG *RINGS* *ROWS* (GET 'PEG3 'COLUMN))
  (PUT PEG1 'RINGS (MAKE-TOWER *RINGS* *ROWS* (GET 'PEG1 'COLUMN)))
  (PUT PEG2 'RINGS NIL)
  (PUT PEG3 'RINGS NIL)
  (UNWIND-PROTECT
	(MOVE-RINGS *RINGS* 'PEG1 'PEG2 'PEG3)
	(CURSOR-LINES NIL)
	(FOREGROUND-COLOR 7) ) )

(DEFUN MOVE-RINGS (RINGS SOURCE-PEG TARGET-PEG SPARE-PEG
    SOURCE-RINGS )
  ((ZEROP RINGS))
  (MOVE-RINGS (SUB1 RINGS) SOURCE-PEG SPARE-PEG TARGET-PEG)
  (SETQ SOURCE-RINGS (GET SOURCE-PEG 'RINGS))
  (PUT TARGET-PEG 'RINGS (CONS (CAR SOURCE-RINGS) (GET TARGET-PEG 'RINGS)))
  (PUT SOURCE-PEG 'RINGS (CDR SOURCE-RINGS))
  (SET-CURSOR (- *ROWS* (LENGTH SOURCE-RINGS))
	      (- (GET SOURCE-PEG 'COLUMN) (CAAR SOURCE-RINGS)))
  (SPACES (CAAR SOURCE-RINGS))
  (PRINC *BLOCK-CHAR*)
  (SPACES (CAAR SOURCE-RINGS))
  (IF *COLOR-MONITOR* (FOREGROUND-COLOR (CAAR SOURCE-RINGS)))
  ( ((IDENTITY *HIGH-SPEED*))
    (PRINT-RING (CAAR SOURCE-RINGS) (CDAR SOURCE-RINGS)
		SOURCE-PEG *HANOI-DELAY-TIME*)
    (IF (OR (EQ SOURCE-PEG 'PEG2) (EQ TARGET-PEG 'PEG2)) NIL
	(PRINT-RING (CAAR SOURCE-RINGS) (CDAR SOURCE-RINGS)
		'PEG2 *HANOI-DELAY-TIME*) )
    (PRINT-RING (CAAR SOURCE-RINGS) (CDAR SOURCE-RINGS)
		TARGET-PEG *HANOI-DELAY-TIME*) )
  (SET-CURSOR (- *ROWS* (LENGTH (GET TARGET-PEG 'RINGS)))
	      (- (GET TARGET-PEG 'COLUMN) (CAAR SOURCE-RINGS)))
  (PRINC (CDAR SOURCE-RINGS))
  (IF *COLOR-MONITOR* (FOREGROUND-COLOR 7))
  (IF *HIGH-SPEED* NIL (TONE NIL *HANOI-DELAY-TIME*))
; (IF (> *HANOI-DELAY-TIME* 10) (DECQ *HANOI-DELAY-TIME*))	;Accelerator
  (MOVE-RINGS (SUB1 RINGS) SPARE-PEG TARGET-PEG SOURCE-PEG) )

(DEFUN PRINT-RING (RING-SIZE RING-STRING PEG TIME)
  ((SET-CURSOR (- *ROWS* *RINGS* 3) (- (GET PEG 'COLUMN) RING-SIZE))
    (WRITE-STRING RING-STRING)
    (SET-CURSOR (- *ROWS* *RINGS* 3) (- (GET PEG 'COLUMN) RING-SIZE))
    (TONE (IF *SOUND-EFFECTS* (CDR (ASSOC (CAAR SOURCE-RINGS) *NOTES*))) TIME)
    (SPACES (ADD1 (* 2 RING-SIZE))) )
  (TONE (IF *SOUND-EFFECTS* (CDR (ASSOC (CAAR SOURCE-RINGS) *NOTES*))) TIME) )

(SETQ *NOTES* '((1 . 523) (2 . 494) (3 . 440) (4 . 392) (5 . 349) (6 . 330)
	(7 . 294) (8 . 262) (9 . 247) (10 . 220) (11 . 196) (12 . 175)
	(13 . 165) (14 . 147) (15 . 131)))

(DEFUN PRINT-PEG (RINGS ROW COLUMN)
  (LOOP
    (SET-CURSOR (DECQ ROW) COLUMN)
    (PRINC *BLOCK-CHAR*)
    ((ZEROP RINGS))
    (DECQ RINGS) ) )

(DEFUN MAKE-TOWER (RINGS ROW COLUMN
    PEG-RINGS )
  (LOOP
    ((ZEROP RINGS)
      (IF *COLOR-MONITOR* (FOREGROUND-COLOR 7))
      PEG-RINGS )
    (PUSH (CONS RINGS (PACK (MAKE-LIST (ADD1 (* 2 RINGS)) *BLOCK-CHAR*)))
	  PEG-RINGS)
    (SET-CURSOR (DECQ ROW) (- COLUMN RINGS))
    (IF *COLOR-MONITOR* (FOREGROUND-COLOR RINGS))
    (PRINC (CDAR PEG-RINGS))
    (DECQ RINGS) ) )

(DEFUN CENTER (MSG)
  (SET-CURSOR (ROW)
	(TRUNCATE (- (CADDDR (MAKE-WINDOW)) (LENGTH MSG)) 2))
  (WRITE-STRING MSG) )

(DEFUN PARSE-INTEGER (SYM RADIX
    CHAR SIGN N )
  (SETQ *STRING-INDEX* 0)
  (LOOP
    ((NULL (SETQ CHAR (CHAR SYM *STRING-INDEX*))) NIL)
    ((NEQ CHAR '| |)
      (SETQ SIGN 1)
      ( ((EQ CHAR '+)
	  (INCQ *STRING-INDEX*) )
	((EQ CHAR '-)
	  (SETQ SIGN -1)
	  (INCQ *STRING-INDEX*) ) )
      ((SETQ CHAR (CHAR SYM *STRING-INDEX*))
	((SETQ N (DIGIT-CHAR-P CHAR RADIX))
	  (IF (NULL RADIX) (SETQ RADIX 10))
	  (LOOP
	    (INCQ *STRING-INDEX*)
	    ((NULL (SETQ CHAR (CHAR SYM *STRING-INDEX*))))
	    ((NOT (SETQ CHAR (DIGIT-CHAR-P CHAR RADIX))))
	    (SETQ N (+ (* N RADIX) CHAR)) )
	  (* SIGN N) ) ) )
    (INCQ *STRING-INDEX*) ) )

(DEFUN Y-OR-N-P (MSG)
  ( ((NULL MSG))
    (FRESH-LINE T)
    (WRITE-STRING (PACK* MSG " (Y/N) ") T) )
  (CLEAR-INPUT T)
  (LOOP
    (SETQ CHAR (CHAR-UPCASE (ASCII (READ-BYTE T))))
    ((EQ CHAR 'Y) (WRITE-LINE CHAR T) T)
    ((EQ CHAR 'N) (WRITE-LINE CHAR T) NIL)
    (WRITE-BYTE 7 NIL T) ) )

(HANOI)
