
            2КРАТКОЕ ОПИСАНИЕ  СИСТЕМ  muSHELL и muLISP

I. 2Инструкции по эксплуатации и описание системы muSHELL      02
1.1. Общие положения                                        2
1.2.  Файлы конфигурации                                    2
1.3. Работа со строчным редактором в muSHELL                2
1.4. Функциональная клавиатура muSHELL                      3
II.  2КРАТКОЕ ОПИСАНИЕ ФУНКЦИЙ muLISP85                        05
2.1. Функции выборки                                        5
2.2 Конструирующие функции                                  6
2.3. Функции распознавания                                  7
2.4 Функции сравнения                                       9
2.5 Логические функции                                     10
2.6 Функции присваивания                                   10
2.7  Примитивы определения функций                         11
2.8  Арифметические функции                                12
2.9  Функции ввода                                         13
2.10 Функции вывода                                        13
2.11 Функции работы со строками                            14
3.1 Сообщения об ошибках                                   16
3.2   Работа со стеком                                     17
3.3   Функции свойств                                      17
3.4  Побитовые  логические  функции                        18
3.5   Контрольные конструкции                              19
3.6  Функции управления памятью                            21
3.7   Работа с оперативной памятью                         21
3.8 Работа с экраном монитора                              21
.
                            - 2 -

     I. 2Инструкции по эксплуатации и описание системы muSHELL
                     1.1. Общие положения

     LISP-оболочка muSHELL   реализована   в   среде   системы
muLISP87.  Представляет комплекс сервисных диалоговых средств,
поддерживающих процесс реализации и отладки программных систем
на языке LISP.
    Наполнение оболочки конкретным содержимым позволяет  созда-
вать ряд коммерческих программных продуктов со стандартным диа-
логовым интерфейсом для пользователя-разработчика.

                 1.2.   2Файлы конфигурации

    К  файлам конфигурации относятся два файла со стандартными
именами:
    *.SET - определяет конфигурацию аппаратных средств.
    INIT.LSP  -  определяет  программные средства расширения и
модификации существующего программного обеспечения.
    Файл INIT.LSP содержит любые выражения на LISP. Загрузка и
вычисление выражений из этого файла производится  одновременно
с загрузкой системы.
    Файл *.SET содержит выражения на LISPе,  определяющие  ряд
системных  переменных для задания необходимого состояния аппа-
ратуры.   Установка   соответствующих   программно-аппаратных
средств  производится  в  момент загрузки системы.  Переменные
файла *.LSP  устанавливаются в диалоге (клавиша F9).
    *.PIC - файл, в котором хранится изображение заставки;
    *.FNT - файл, в котором хранится русский шрифт для CGA;
    *.MEM - файл, в котором хранится слепок рабочей памяти;
    *.HLP - файл, в котором хранится справочная информация;


        21.3. Работа со строчным редактором в muSHELL

    В  процессе  работы  пользователь  вводит LISP-выражения в
систему используя системный строчный редактор.
     ПЕРЕМЕЩЕНИЕ
    Для перемещения курсора по строке используются клавиши:
    - Стрелки ВПРАВО, ВЛЕВО: перемещают курсор на одну позицию
в соответствующем направлении.
    - Клавиши HOME и END: перемещают курсор на первый или пос-
ледний символ строки.
     УДАЛЕНИЕ
    Для удаления символов и строк используются клавиши:
    - Клавиша Backspace (или <-): служит для стирания символа,
слева  от  курсора,  при этом остаток строки справа от курсора
смещается влево.
    - Клавиша DEL: служит для стирания символа,  стоящего  над
курсором, при этом остаток строки смещается влево.
     ВСТАВКА
    Для  ввода символов в текст требуется простое нажатие на
соответствующую клавишу. Ввод символов возможен в одном  из
двух режимов: вставка и замена.
    В режиме вставки (установлен по умолчанию) вводимые символы
вставляются в строку в место положения курсора. В режиме замены
новые символы вводятся поверх старых.  Для переключения режимов
используется клавиша:  INS - переход из режима вставки в замену
и обратно. Повторные нажатия этой клавиши изменяют режим встав-
ки символов на противоположный.
    Текущее состояние режима вставки отображается видом  курсо-
ра:  если установлен заменяющий режим, то размер курсора укруп-

                            - 3 -
нен до половины высоты символа. В противном случае курсор имеет
нормальный размер.
     ШРИФТ
    Ввод букв возможен в режиме русской и латинской клавиатуры.
    Для переключения  этого режима служит клавиша:  Caps Lock -
переход с русской клавиатуры на латинскую и обратно.
     ВВОД СООБЩЕНИЯ
    Имеются два варианта завершения ввода сообщения, определя-
емые нажатием клавиш:
    - "Enter" (нормальный вариант) - результатом является вве-
денная (скорректированная) строка,  которая  будет  обработана
системой
    - "Esc" (аварийное завершение). В этом случае вводимое со-
общение аннулируется.
     СТЕК ВВОДИМЫХ СООБЩЕНИЙ
    Все  введенные сообщения запоминаются в специальном стеке,
глубина    которого    определяется    системной    переменной
*READ_LIMIT*  (Первоначальное  значение  этой переменной равно
15, его можно изменять средствами  LISPа).  Строчный  редактор
можно   перемещать   по   стеку   нажатием   клавиш:   стрелка
ВВЕРХ,стрелка ВНИЗ.

           21.4. Функциональная клавиатура muSHELL

     В системе  для удобства пользователя используется функцио-
нальная клавиатура. Нажатие соответствующей функциональной кла-
виши  вызывает на выполнение соответствующую сервисную диалого-
вую процедуру.  Прерывание  работы  этой  процедуры  вызывается
нажатием клавиши "Esc".
     Определены следующие функциональные клавиши:
     F1 (Help) - Подсказка
     F2 (Loading) - загрузка файла с диска.
     Система запрашивает имя файла и затем загружает его содер-
жимое в оперативную память при помощи функции LOADING. Имя фай-
ла указывается в стандартном формате,  принятым в MS DOS.  Файл
должен содержать S-выражения в форме, совпадающей с установлен-
ным интерактивным режимом вычисления  (режим  форм  либо  режим
пар).
     F3 (Print) - печать файла.
     Система запрашивает имя файла и затем выводит его содержи-
мое на принтер при помощи функции PRINT_FILE.  Имя файла указы-
вается в стандартном формате принятым в MS DOS *).  Кроме имени
файла задается вопрос о разделении текста на страницы.  При по-
ложительном  ответе печатающее устройство будет устанавливаться
перед печатью очередной страницы (страницы разделяются символа-
ми с ASCII=12)
    F4 (Edit) - запускает файловый редактор,  в который загру-
жает выбранный файл.  Редактор может быть либо  программой  на
LISPе,  либо внешней программой, реализованной на другом языке
программирования.  Информация о программе редактора может быть
получена либо из файла *.SET, либо (в случае отсутствия *.SET)
в диалоге с пользователем (клавиша F9).
     F5 (Base) -  открытие  (создание)  (в  текущей  директории
виртуальной базы объектов (ВБО) для сохранения фреймов и проце-
дур).
     Система запрашивает  имя ВБО.  Если ВБО была создана - она
подключается к системе, если нет - она создается. Очередное на-
жатие  F5 приведет к закрытию ВБО.  Под ВБО отводится отдельная
директория с расширением ".BAZ", которая создается внутри теку-
щей директории.
     F6 (MS DOS) - переход в режим интерпретатора COMMAND.COM
операционной системы MS DOS. Выход из интерпретатора обеспечи-

                            - 4 -
вается вводом команды EXIT.
     F7 (Trace) - Установить режим трассировки для LISP-функций.
     Система запрашивает имена LISP-функции, находящихся в опе-
ративной  памяти  и  устанавливает  для указанных функций режим
трассировки.  При вводе имена функций отделяются друг от  друга
пробелами.
     Для приостановления процесса вычисления в  режиме  трасси-
ровки следует один раз нажать клавишу ScrollLock. Повторное на-
жатие ScrollLock продолжит вычисления с прерванного места.
     Для  прерывания процесса  следует нажать клавишу Esc
     F8 (Untrace) - Отменить режим трассировки для LISP-функций.
     Система запрашивает имена LISP-функции, находящейся в опе-
ративной  памяти,  отменяет для указанных функций режим трасси-
ровки.  При вводе имена функций отделяются друг от друга пробе-
лами.
     F9  (Setup) - установка конфигурации.
      2Edit program name 0 - имя внешнего редактора (TE.EXE)
      2Type of Edit 0 - тип редактора (лисп, EXE-модуль)
      2Screen driver 0  -  подключение встроенного драйвера экрана
                       ( 2Ye 0s)
      2Keyboard Driver 0 - подключение встроенного драйвера клави-
                       атуры ( 2Ye 0s)
      2Printer Driver 0 - настройка на драйвер принтера
      2Break sound 0 - звуковая индикация прерывания по ошибке
      2Read stack size 0 - глубина стека строчного редактора
      2Echo for loading 0 - ввод файлов в режиме "эхо"
      2Picture Shade 0 - наличие тени
      2Current directory 0 - установка текущей директории при вхо-
                         де  в систему
      2Menu colors 0 - установка цвета меню
      2Screen colors 0 - установка цвета экрана
      2Save setup 0 - сохранение текущей конфигурации (*.SET)
      2Load setup 0 -загрузка текущей конфигурации (*.SET)

     F10 (Quit) - Выход из системы.

--------------------------------------------------------------
     *) Примечание:  При задании имени файла допускается указа-
ние префикса имени файла,  состоящего из маршрута  по  файловой
системе и имени накопителя.  Допускается также выделение группы
файлов макросимволами "*" и "?".

                           2Замечания

     1) Для прерывания процесса вычисления следует нажать кла-
вишу Esc.
     2)  Для  избежания  коллизии имен переменных настоятельно
рекомендуем использовать уникальные имена глобальных  перемен-
ных. Например все имена глобальных переменных могли бы, напри-
мер, начинаться с префикса "#"
     Все глобальные переменные  выделены символом "*"

.
                            - 5 -
           II.  2КРАТКОЕ ОПИСАНИЕ ФУНКЦИЙ muLISP85

                     2.1. 2 Функции выборки 0
----------------------------------------------------------------
 N |  Функция   |         Значение функции, примеры          |
----------------------------------------------------------------
 1 |CAR [S]     | 1.S-список.CAR выдает первый элемент списка| F
   |            |(CAR '(A B C D))                            |
   |            |A                                           |
   |            |                                            |
   |            | 2.S-точечная пара.CAR выдает левую часть   |
   |            |часть точечной пары                         |
   |            |(CAR '((A . B) . C)                         |
   |            |(A . B)                                     |
   |            |                                            |
   |            | 3.S-атом.CAR выдает значение атома, присво-|
   |            |енное ему специальными функциями присваива- |
   |            |ния                                         |
   |            |(SETQ X 7)                                  |
   |            |7                                           |
   |            |(CAR 'X)                                    |
   |            |7                                           |
   |            |В случае если у атома значение отсутствует, |
   |            |выдается имя атом                           |
----------------------------------------------------------------
 2 |CDR [S]     | 1.S-список.CAR возвращает список без перво-| F
   |            |го элемента                                 |
   |            |           (CDR '(A B C D))                 |
   |            |           (B C D)                          |
   |            |                                            |
   |            | 2.S-точечная-пара.CDR возвращает правую    |
   |            |часть точечной пары (на верхнем уровне)     |
   |            |           (CDR '((A . B) . C))             |
   |            |           С                                |
   |            |                                            |
   |            | 3.S-атом.CDR возвращает список свойств     |
   |            |атома                                       |
   |            |           (PUT 'JOE 'SEX 'MALE)            |
   |            |           MALE                             |
   |            |           (CDR 'JOE)                       |
   |            |           ((SEX . MALE))                   |
----------------------------------------------------------------
 3 |LAST [L]    |  LAST возвращает список, в котором убраны  |
   |            |все элементы кроме последнего               |
   |            |(LAST '(A B C D))                           |
   |            |(D)                                         |
   |            |(LAST '(A B C . D))                         |
   |            |(C . D)                                     |
   |            |(LAST 'A)                                   |
   |            |NIL                                         |
----------------------------------------------------------------
 4 |NTHCDR [N L]|  NTHCDR возвращает N-й CDR от списка L     |
   |            |                                            |
   |            |(NTHCDR 0 '(A B C D))                       |
   |            |(A B C D)                                   |
   |            |(NTHCDR 1 '(A B C D))                       |
   |            |(B C D)                                     |
   |            |(NTHCDR 2 '(A B C D))                       |
   |            |(C D)                                       |
   |            |(NTHCDR 5 '(A B C D))                       |
   |            |NIL                                         |
   |            |(NTHCDR 2 '(A B . C))                       |

                            - 6 -
   |            |C                                           |
----------------------------------------------------------------
 5 |NTH [N L]   |   NTH возвращает N-й элемент списка (отсчет| F
   |            |ведется от нуля)                            |
   |            |                                            |
   |            |(NTH 0 '(A B C D))                          |
   |            |0                                           |
   |            |(NTH 3 '(A B C D))                          |
   |            |D                                           |
   |            |(NTH 4 '(A B C D))                          |
   |            |NIL                                         |
----------------------------------------------------------------
 6 | SUBLIST    |   SUBLIST копирует и возвращает подсписок с| F
   |    [L N M] |N-го по M-й элементы (отсчет ведется от нуля)
   |            |                                            |
   |            |(SUBLIST '(A B C D E) 2 4)                  |
   |            |(C D E)                                     |
   |            |(SUBLIST '(A B C D E) 2 2)                  |
   |            | (C)                                        |
   |            |(SUBLIST '(A B C D E) 2)                    |
   |            |(C D E F)                                   |
   |            |(SUBLIST '(A B C D E) 0 3)                  |
   |            |(A B C D)                                   |
----------------------------------------------------------------
10 |ASSOC       |   ASSOC осуществляет поиск в ассоциативном |
   |  [K AL]    |списке (AL) по значениям ключа (К) соответ- |
   |            |ствующего свойства                          |
   |            |                                            |
   |            |(SETQ CAPITALS                              |
   |            |'((USA . WASHINGTON)(FRANCE . PARIS)(JAPEN . TOCIO)))
   |            |((USA . WASHINGTON)(FRANCE . PARIS)(JAPEN . TOCIO)))
   |            |                                            |
   |            |(ASSOC 'FRANCE CAPITALS)                    |
   |            |(FRANCE . PARIS)                            |
   |            |(ASSOC 'AUSTRALIA CAPITALS)                 |
   |            |NIL                                         |
----------------------------------------------------------------

                2.2 2 Конструирующие функции 0
----------------------------------------------------------------
 N |  Функция   |           Значение функции, примеры         |
----------------------------------------------------------------
 1 |CONS[S1 S2] | 1.S2-список.CONS возвращает список S2 первым|F
   |            |элементом которого добавлен аргумент S1      |
   |            |                                             |
   |            |(CONS 'A '(B C D))                           |
   |            |(A B C D)                                    |
   |            |                                             |
   |            | 2.S2-атом.CONS возвращает точечную пару,левая
   |            |часть которой S1, а правая - S2              |
   |            |                                             |
   |            |(CONS 'A 'B)                                 |
   |            |(A . B)                                      |
----------------------------------------------------------------
 2 |LIST[S1..Sn]|  LIST kонструирует и возвращает список, из  |F
   |            |элементов S1, S2,...Sn.При отсутствии аргумен-
   |            |тов возвращает NIL                           |
   |            |                                             |
   |            |(LIST 'A 'B 'C 'D)                           |
   |            |(A B C D)                                    |
   |            |(LIST 'A '(B C) 'D)                          |
   |            |(A (B C) D)                                  |

                            - 7 -
   |            |(LIST)                                       |
   |            |NIL                                          |
----------------------------------------------------------------
 3 |APPEND      |  APPEND конструирует и возвращает список из |F
   |  [L1...LN] |элементов списков L1, L2 ... Ln              |
   |            |                                             |
   |            |(APPEND '(A B C) '(D E F))                   |
   |            |(A B C D E F)                                |
   |            |(SETQ FOO '(1 2 3))                          |
   |            |(1 2 3)                                      |
   |            |(APPEND '(A B C) FOO '(K L M))               |
   |            |(A B C 1 2 3 K L M)                          |
----------------------------------------------------------------
 4 |REVERSE [L] |  REVERSE возвращает реверсированный список L|F
   |            |(элементы списка L в обратном порядке)       |
   |            |                                             |
   |            |(REVERSE '(A B C D E))                       |
   |            |(E D C B A)                                  |
   |            |(REVERSE '(A B C) '(1 2 3))                  |
   |            |(C B A 1 2 3)                                |
   |            |(REVERSE '(A B C) 'D)                        |
   |            |(A B C . D)                                  |
----------------------------------------------------------------
 5 |LENGTH[S]   |  1.S-список.LENGTH возвращает число элемен- |F
   |            |тов в списке L                               |
   |            |(LENGTH '(A B C D E))                        |
   |            |5                                            |
   |            |                                             |
   |            |  2.S-атом.LENGTH возвращает число символов  |
   |            |в атоме                                      |
   |            |(LENGTH 'TIME)                               |
   |            |4                                            |
   |            |                                             |
   |            |  3.S-число.LENGTH возвращает количество бай-|
   |            |тов занимаемых числом в памяти               |
   |            |(LENGTH -13)                                 |
   |            |1                                            |
----------------------------------------------------------------

                  2.3 2. Функции распознавания 0
----------------------------------------------------------------
 N |  Функция   |            Значение функции, примеры       |
----------------------------------------------------------------
 1 |NUMBERP [S] |Т, если S - целое число, иначе NIL          |F
   |            |                                            |
   |            |(NUMBERP 32)                                |
   |            |T                                           |
   |            |(NUMBERP 'D)                                |
   |            |NIL                                         |
----------------------------------------------------------------
 2 |ATOM [S]    |Т, если S - атом, иначе NIL                 |F
   |            |                                            |
   |            |(ATOM 'KOT)                                 |
   |            |T                                           |
   |            |(ATOM '(A B C))                             |
   |            |NIL                                         |
   |            |(ATOM NIL)                                  |
   |            |T                                           |
----------------------------------------------------------------
 3 |LISTP [S]   |Т, если S - список, иначе NIL               |F
   |            |                                            |
   |            |(LISTP 'DOG)                                |

                            - 8 -
   |            |NIL                                         |
   |            |(LISTP '(A B C))                            |
   |            |NIL                                         |
   |            |(LISTP NIL)                                 |
   |            |T                                           |
----------------------------------------------------------------
 4 |NULL [S]    |Т, если S - пустой список, иначе NIL        |F
   |            |                                            |
   |            |(NULL NIL)                                  |
   |            |T                                           |
   |            |(NULL ())                                   |
   |            |T                                           |
   |            |(NULL '(A B C))                             |
   |            |NIL                                         |
----------------------------------------------------------------
 5 |ZEROP [S]   |Т, если S - нуль, иначе NIL                 |F
   |            |                                            |
   |            |(ZEROP 0)                                   |
   |            |T                                           |
   |            |(ZEROP 12)                                  |
   |            |NIL                                         |
   |            |(ZEROP 'DOG)                                |
   |            |NIL                                         |
----------------------------------------------------------------
 6 |PLUSP [S]   |T, если S - положительное число             |F
   |            |                                            |
   |            |(PLUSP 12)                                  |
   |            |T                                           |
   |            |(PLUSP -4)                                  |
   |            |NIL                                         |
   |            |(PLUSP 0)                                   |
   |            |NIL                                         |
   |            |(PLUSP 'DOG)                                |
   |            |NIL                                         |
----------------------------------------------------------------
 7 |MINUSP [S]  |Т, если S - отрицательное число             |F
   |            |                                            |
   |            |(MINUSP 12)                                 |
   |            |NIL                                         |
   |            |(MINUSP -4)                                 |
   |            |T                                           |
   |            |(MINUSP 0)                                  |
   |            |NIL                                         |
   |            |(MINUSP 'DOG)                               |
   |            |NIL                                         |
----------------------------------------------------------------
 8 |ODDP [S]    |Т, если S - нечетное число, иначе NIL       |F
   |            |                                            |
   |            |(ODDP 12)                                   |
   |            |NIL                                         |
   |            |(ODDP -41)                                  |
   |            |T                                           |
   |            |(ODDP 0)                                    |
   |            |NIL                                         |
----------------------------------------------------------------
 9 |EVENP [S]   |Т, если S - четное число, иначе NIL         |F
   |            |                                            |
   |            |(EVENP 12)                                  |
   |            |T                                           |
   |            |(EVENP -41)                                 |
   |            |NIL                                         |
   |            |(EVENP 0)                                   |

                            - 9 -
   |            |T                                           |
----------------------------------------------------------------

                      2.4 2 Функции сравнения 0
----------------------------------------------------------------
 N |  Функция   |             Значение функции, примеры
----------------------------------------------------------------
 1 |EQUAL[S1 S2]|T, если S1 равно S2, иначе NIL              | F
   |            |                                            |
   |            |(EQUAL 'A 'A)                               |
   |            |T                                           |
   |            |(EQUAL '(A B C) '(A B C))                   |
   |            |T                                           |
   |            |(EQUAL '(A B C '(C B A))                    |
   |            |NIL                                         |
----------------------------------------------------------------
 2 |MEMBER      |Если S является элементом списка L, тогда   |F
   |    [S L]   |значением функции будет часть списка L, на- |
   |            |чиная с первого вхождения S, иначе NIL      |
   |            |                                            |
   |            |(MEMDER 'A '(B C D))                        |
   |            |NIL                                         |
   |            |(MEMBER 'A '(B A D))                        |
   |            |(A D)                                       |
----------------------------------------------------------------
 3 |= [N1...Nn] |Т, если N1=N2=N3...=Nn, иначе NIL           | F
   |            |                                            |
   |            |(= 5 9)                                     |
   |            |NIL                                         |
   |            |(= 3 3.0)                                   |
   |            |T                                           |
----------------------------------------------------------------
 4 |/= [N1...Nn]|T, если N1=N2 и N2=N3 и т.д., иначе NIL     | F
   |            |                                            |
   |            |(/= 5 9)                                    |
   |            |T                                           |
   |            |(/= 4 4 -7)                                 |
   |            |NIL                                         |
   |            |(/= 3 3.0)                                  |
   |            |NIL                                         |
   |            |(/= 6 2 6)                                  |
   |            |T                                           |
----------------------------------------------------------------
 5 |< [N1...Nn] |Т, если N1<N2 и N2<N3 и т .д., иначе NIL    | F
   |            |                                            |
   |            |(< 5 9)                                     |
   |            |T                                           |
   |            |(< 4 -7)                                    |
   |            |NIL                                         |
   |            |(< 3 3.0)                                   |
   |            |NIL                                         |
----------------------------------------------------------------
 6 |> [N1...Nn] |T, если N1>N2 иN2>N3 и т.д., иначе NIL      | F
   |            |                                            |
   |            |(> 5 9)                                     |
   |            |NIL                                         |
   |            |(> 4 -7)                                    |
   |            |T                                           |
   |            |(> 3 3.0)                                   |
   |            |NIL                                         |
----------------------------------------------------------------
 7 |<= [N1...Nn]|T, если N1<N2 и N2<N3 и т.д., иначе NIL     | F

                            - 10 -
   |            |                                            |
   |            |(<= 5 9)                                    |
   |            |T                                           |
   |            |(<= 4 -7)                                   |
   |            |NIL                                         |
   |            |(<= 3 3.0)                                  |
   |            |T                                           |
----------------------------------------------------------------
 8 |>= [N1...Nn]|T, если N1>N2 и N2>N3 и т.д., иначе NIL     | F
   |            |                                            |
   |            |(>= 5 9)                                    |
   |            |NIL                                         |
   |            |(>= 4 -7)                                   |
   |            |T                                           |
   |            |(>= 3 3.0)                                  |
   |            |T                                           |

                     2.5 2 Логические функции 0
----------------------------------------------------------------
 N |  Функция   |           Значение функции, примеры
----------------------------------------------------------------
 1 |NOT [S]     |  NOT возвращает Т, если S имеет значение NIL|F
   |            |иначе NIL                                    |
   |            |                                             |
   |            |(NOT NIL)                                    |
   |            |T                                            |
   |            |(NOT 'FOO)                                   |
   |            |NIL                                          |
   |            |(NOT (EQUAL 'DOG 'CAT))                      |
   |            |T                                            |
----------------------------------------------------------------
 2 |AND[S1...S2]| AND слева направо вычисляет значения S1...Sn|F
   |            |и возвращает значение T, если все аргументы  |
   |            |неNIL, иначе вычисление проводится до первого|
   |            |NIL и возвращается NIL                       |
   |            |                                             |
   |            |(AND (EQ 'DOG 'CAT)(< 2 3))                  |
   |            |NIL                                          |
   |            |(AND (EQ 'DOG 'DOG)(< 2 3))                  |
   |            |T                                            |
----------------------------------------------------------------
 3 |OR[S1...S2] |   Вычисляются аргументы S1...Sn слева напра-|F
   |            |во, пока не будет получен результат, отличный|
   |            |от NIL, он и будет результатом работы OR.Если|
   |            |все результаты NIL, тогда функция OR возвра- |
   |            |щает NIL                                     |
   |            |                                             |
   |            |(OR (EQ 'DOG 'CAT)(< 2 3))                   |
   |            |T                                            |
   |            |(OR (EQ 'DOG 'CAT)(< 3 2))                   |
   |            |NIL                                          |
----------------------------------------------------------------

                  2.6 2 Функции присваивания 0
----------------------------------------------------------------
 N |  Функция     |       Назначение, значение, примеры
----------------------------------------------------------------
 1 |SET [A S]     |  Значению А присваивается значение S.Зна- |F
   |              |чение А атом.SET возвращает значение второ-|
   |              |го аргумента                               |
   |              |                                           |
   |              |(SET 'PET 'DOG)                            |

                            - 11 -
   |              |DOG                                        |
   |              |(SET PET 'ANIMAL)                          |
   |              |ANIMAL                                     |
   |              |                                           |
   |              |DOG                                        |
   |              |ANIMAL                                     |
   |              |                                           |
   |              |PET                                        |
   |              |DOG                                        |
----------------------------------------------------------------
 2 |SETQ          |  Aргументы A1...An квотируются и им присва-
   |[A1 S1..An Sn]|иваются значения аргументов S1...Sn (соот- |
   |              |ветственно). SETQ возвращает последнее при-|
   |              |своенное значение                          |
   |              |                                           |
   |              |(SETQ FOO '(D E F))                        |
   |              |(D E F)                                    |
   |              |                                           |
   |              |FOO                                        |
   |              |(D E F)                                    |
   |              |                                           |
   |              |(SETQ SUM 5)                               |
   |              |5                                          |
   |              |                                           |
   |              |(SETQ SUM (+ 3 4) SQR (* SUM SUM))         |
   |              |49                                         |
   |              |                                           |
   |              |SUM                                        |
   |              |7                                          |
   |              |                                           |
   |              |SQR                                        |
   |              |49                                         |
----------------------------------------------------------------

              2.7  2 Примитивы определения функций 0
-------------------------------------------------------------------
 N |Функция         | Аргументы | Назначение, значение, примеры |
-------------------------------------------------------------------
 1 |GETD [А]        |А-имя функ-| Выводит на экран определение  |F
   |                |  ции      | функции с именем А.Значение   |
   |                |           | функции - соответствующее лям-|
   |                |           | бда выражение                 |
   |                |           |(GETD  FACTORIAL)              |
   |                |           |(LAMBDA (N) (COND ((ZEROP N) 1)|
   |                |           |(T (* (FACTORIAL (SUB1 N)))))) |
   ----------------------------------------------------------------|--
 2 |MOVD [A1 A2]    |A1-старое  | Функции с именем А1 присваива-|F
   |                |имя функции| ется еще одно имя - А2.Значе- |
   |                |           | ние функции - новое имя       |
   |                |А2-новое   |(MOVD 'CAR 'FIRST)             |
   |                |имя функции|FIRST                          |
   |                |           |(FIRST '(A B C D E))           |
   |                |           |A                              |
   ------------------------------------------------------------------
 3 |REMD [A]        |А-имя функ-| Из оперативной памяти убирает-|F
   |                |  ции      | ся пользовательская функция с |
   |                |           | именем А.Значение функции -   |
   |                |           | имя убираемой функции         |
   |                |           |(DEFUN FACTORIAL (N)           |
   |                |           |   (COND ((ZEROP N) 0)         |
   |                |           |      (T (FACTOPIAL (SUB1 N))) |
   |                |           |   )                           |

                            - 12 -
   |                |           |)                              |
   |                |           |    FACTOPIAL                  |
   |                |           |(GETD  FACTORIAL)              |
   |                |           |(LAMBDA (N) (COND ((ZEROP N) 1)|
   |                |           |(T (* (FACTORIAL (SUB1 N)))))) |
   |                |           |(REMD 'FACTORIAL)              |
   |                |           |    FACTOPIAL                  |
   |                |           |                               |
   |                |           |(GETD  FACTORIAL)              |
   |                |           |    NIL                        |
----------------------------------------------------------------
 4 |DEFUN           |A-имя функ-| Позволяет определить функцию  |SF
   | [A L F1 ...FN] |  ции      | пользователя.Значение функции-|
   |                |           | имя созданной функции         |
   |                |           |                               |
   |                |           |(DEFUN FACTORIAL (N)           |
   |                |           |   (COND ((ZEROP N) 0)         |
   |                |           |      (T (FACTOPIAL (SUB1 N))) |
   |                |           |   )                           |
   |                |           |)                              |
   |                |           |    FACTOPIAL                  |
   |DEFUN           |           | Позволяет определить функцию  |
   |[A(ft L F1..F2)]|           | пользователя.Значение функции-|
   |                |           | имя созданной функции         |
   |                |           |(DEFUN FACTORIAL (LAMBDA (N)   |
   |                |           |   (COND ((ZEROP N) 0)         |
   |                |           |      (T (FACTOPIAL (SUB1 N))) |
   |                |           |   )                           |
   |                |           |                 )             |
   |                |           |)                              |
   |                |           |    FACTOPIAL                  |
-------------------------------------------------------------------
   |GETD [A,tf]     |  - ""-     | результат - тело функции А   |
-------------------------------------------------------------------

                  2.8  2 Арифметические функции 0
----------------------------------------------------------------
 N |  Функция   |          Значение функции, примеры
----------------------------------------------------------------
 1 |MAX[N1...Nn]| Возвращает mаксимальное из чисел N1...Nn   | F
   |            |(MAX 5 -7 4)                                |
   |            |5                                           |
----------------------------------------------------------------
 2 |MIN[N1...Nn]| Возвращает минимальное из чисел N1...Nn    | F
   |            |(5 -7 4)                                    |
   |            |-7                                          |
----------------------------------------------------------------
 3 |+ [N1...Nn] | Возвращает сумму чисел N1+N2+...+Nn        | F
   |            |(+ 2 3 4 -5)                                |
   |            |4                                           |
----------------------------------------------------------------
 4 |- [N1...Nn] | Возвращает разность между N1 и N2+N3+...+Nn| F
   |            |(- 12 5 -2)                                 |
   |            |10                                          |
----------------------------------------------------------------
 5 |* [N1...Nn] | Возвращает произведение чисел: N1*N2*...*Nn| F
   |            |(* 3 4 5)                                   |
   |            |60                                          |
----------------------------------------------------------------
 6 |/ [N1...Nn] | Возвращает результат от деления N1 на про- | F
   |            |изведение N2*N3*...*N4                      |
   |            |(/ 12 5 -3)                                 |

                            - 13 -
   |            |0.8                                         |
----------------------------------------------------------------
 7 |ADD1 [N]    | Возвращает N, увеличенное на 1: N + 1      | F
   |            |(ADD1 3)                                    |
   |            |4                                           |
--------------------------------------------------------------
 8 |SUB1 [N]    | Возвращает N, уменьшенное на 1: N - 1      | F
   |            |(SUB1 3)                                    |
   |            |2                                           |
----------------------------------------------------------------
 9 |ABS [N]     | Возвращает абсолютное значение N           | F
   |            |(ABS -3)             |(ABS 3)               |
   |            |3                    |3                     |
----------------------------------------------------------------
10 |SIGNUM [N]  | Возвращает знак числа: при N>0 - 0         | F
   |            |                        при N<0 - 1         |
   |            | (SIGNUM -0.2)       |(SIGNUM 5)            |
   |            | 1                   |0                     |
----------------------------------------------------------------

                       2.9  2 Функции ввода 0
----------------------------------------------------------------
 N |  Функция   |Аргументы| Назначение, значение, примеры
----------------------------------------------------------------
 1 |RDS [D: I.R]|D: - диск| Открывает файл на диске для счи- | F
   |            |I - имя  | тывания в оперативную память     |
   |            |файла    | Возвращает имя файла             |
   |            |R - рас- |(RDS 'B:MLSP.TXT)                 |
   |            |ширение  |B:MLSP.TXT                        |
----------------------------------------------------------------
 2 |READ-CHAR []|         | Считывает следующий символ с теку- F
   |            |         | щего входного устройства и возвра-
   |            |         | щает символ, чье печатное имя со-|
   |            |         | стоит из этих характеристик.     |
----------------------------------------------------------------
 3 |READ [ ]    |         | Считывает S-выражение с текущего | F
   |            |         | входного устройства и возвращает |
   |            |         | соответствующий список           |
---------------------------------------------------------------
 4 |READ-BYTE   |         | Считывает байт с текущего входно-| F
   |            |         | го устройства                    |
----------------------------------------------------------------
 2 |RDS []      |         | Закрывает файл для считывания    | F
----------------------------------------------------------------
10 |READ-LINE[ ]|         | Считывает строку  с   с текущего |
   |            |         | входного устройства и возвращает |
   |            |         | ее в качестве результата         |
--------------------------------------------------------------
11 |LISTEN [ ]  |         | Результат - Т, если во входном   |  F
   |            |         | устройстве есть еще символы для  |
   |            |         | ввода                            |
----------------------------------------------------------------

                     2.10 2 Функции вывода 0
----------------------------------------------------------------
 N |  Функция   |       Назначение, значение, примеры        |
----------------------------------------------------------------
 1 |WRS [D: I.R]|D: - диск| Открывает файл на диске для вы-  | F
   |            |I - имя  | вода.                            |
   |            |файла    | Возвращает имя файла             |
   |            |R - рас- |(WRS 'B:MLSP.TXT)                 |
   |            |ширение  |B:MLSP.TXT                        |

                            - 14 -
----------------------------------------------------------------
 4 |PRINC [S]   | Печатает S без перехода на новую строку   | F
   |            | Результат - S.                             |
----------------------------------------------------------------
 4 |PRINT [S]   | Печатает S с   переходом на новую строку  | F
   |            | Результат - S.                             |
----------------------------------------------------------------
 6 |TERPRI [S]  | На выходном устройстве пропускает N строк  | F
 ----------------------------------------------------------------
 7 |SPACES [N]  | На выходном устройстве пропускает N позиций| F
----------------------------------------------------------------
 8 |WRITE-BYTE  | На выходном устройстве печатает символ     | F
   |        [N] | соответствующий ASCII коду N               |
----------------------------------------------------------------

              2.11 2 Функции работы со строками 0
----------------------------------------------------------------
 1 |SUBSTRING   |     Если <атом> - либо символ, либо число, |
   |[atom,n,m]  | <n> и <m> - неотрицательные целые, и n<=m, |
   |            | то (SUBSTRING атом n m) возвращает символ, |
   |            | у которого р-имя состоит из символов       |
   |            | р-имени <атома>, начиная с n-го по m-й,    |
   |            | причем отсчет символов ведется с 0.        |
   |            |     Все значения <n> меньше, чем 0, прини- |
   |            | маются равными 0. Если <m> пропущено, яв-  |
   |            | ляется отрицательным целым или больше, чем |
   |            | количество символов в <атом>, принимается, |
   |            | что <m> равно количеству символов в        |
   |            | <atom>. Если <n> больше или равно количес- |
   |            | тву символов в <atom> или если n>m,        |
   |            | SUBSTRING возвращает символ, у которо-     |
   |            | гор-имя есть нулевая строка.               |
   |            |     Отметим, что SUBSTRING всегда возвра-  |
   |            | щает символ, даже если <атом> есть число.  |
   |            |     (SUBSTRING 'ABCDEFG 2 4) --> CDE       |
   |            |     (SUBSTRING 'ABCDEFG 2) --> CDEFG       |
   |            |     (SUBSTRING 'ABCDEFG 0 4) --> ABCDE     |
   |            |     (SUBSTRING 1000 0) --> |1000|          |
----------------------------------------------------------------
2  |FINDSTRING  |     (FINDSTRING атом1 атом2 n) возвращает  |
   |[atom1,atom2| номер позиции первого вхождения <атома1> в |
   |n]          | <атом2>, причем отсчет ведется с 0. Если   |
   |            | <n> - ноль или положительное целое, поиск  |
   |            | начинается с n-го символа <атома2>. Если   |
   |            | <атом1> не найдено, функция возвращает     |
   |            | NIL.                                       |
   |            |                                            |
   |            | (FINDSTRING 'XYZ 'ABCXYZDEFXYZGHI) --> 3   |
   |            | (FINDSTRING 'XYZ 'ABCXYZDEFXYZGHI 4) --> 9 |
   |            | (FINDSTRING 'XYZ 'ABCDEFGHI) --> NIL       |
----------------------------------------------------------------
 3 |  UNPACK    |     (UNPACK атом) возвращает список симво- |
   |  [atom]    | лов полученных путем расщепления <атом>.   |
   |            | Если <атом> не является атомом, UNPACK     |
   |            | возвращает NIL.                            |
   |            |     (UNPACK 'ABCDE) --> (A B C D E)        |
   |            |     (SETQ FOO -216) --> -216               |
   |            |     (UNPACK FOO) --> (- \2 \1 \6)          |
----------------------------------------------------------------
 4 |PACK [list] |     PACK возвращает символ, который состо- |
   |            | ит из сцепленных имен атомов в <list>. От- |
   |            | метим, что PACK всегда возвращает символ,  |

                            - 15 -
   |            | даже если р-имя состоит только из одноз-   |
   |            | начных чисел.                              |
   |            |     (PACK '(A B C)) --> ABC                |
   |            |     (PACK '(3 A 5)) --> |3A5|              |
----------------------------------------------------------------
 5 |PACK*       |     (PACK* атом1 ... атомN) возвращает     |
   |[atom1,atom2| символ, который состоит из сцепленных      |
   |...,atom N] | <атома1>, ..., <атомаN>. PACK* аналогичено |
   |            | PACK, но работает не со списком атомов, а  |
   |            | с произвольным количеством атомов.         |
   |            |                                            |
   |            |     (PACK* 'A 'B 'C) --> ABC               |
   |            |     (PACK* 3 'A 5) --> |3A5|               |
----------------------------------------------------------------

.
                            - 16 -
           III.   2Дополнительные сведения о muLISP85

                3.1  2Сообщения об ошибках

    В данном  разделе приводятся сообщения об ошибках в системе
muLISP,  а также опции,  имеющиеся в распоряжении  пользователя
при появлении ошибок.
    Когда muLISP обнаруживает ошибочное  состояние,  вызывается
функция BREAK.  BREAK выдает соответствующее сообщение об ошиб-
ке,  приостанавливает выполнение программы и обеспечивает поль-
зователя опциями продолжения работы на выбор.
    Ниже в алфавитном порядке приведены  сообщения  об  ошибках
muLISP:
    - DISK FULL ( диск полный ):  означает, что памяти для раз-
мещения данных,  записанных на дисковом файле,  не хватает. Вы-
полнение программы  прекращается,  и  возникает  прерывание  по
ошибке.  Т.к.  файл остается открытым, имеется возможность сте-
реть и другие файлы на всей дискете ( с помощью функции EXETUTE
) и продолжить запись в файл;
    - END-OF-FILE ( конец файла ):  означает,  что была сделана
попытка  считать данные за пределами конца входного файла ( CIF
) или из его пустых мест
    - FILE NOT FOUND ( файл не найден ): означает, что исходный
и ( или )  SYS-файл,  указанный  в  командах  ОС,  инициирующих
muLISP,  не найден,  или SYS-файл неправильной версии. SYS-файл
может быть загружен только под управлением той  версии  muLISP,
которая используется для сохранения файла. В гл. 2 описано, как
загружать файлы с использованием команд ОС.
    Исходные и  SYS-файлы,  кроме того,  могут быть загружены в
muLISP с использованием команд RDS и LOAD соответственно. Когда
одна из этих команд завершается, а файл не найден, вместо сооб-
щения "file not found" команда возвращает признак NIL;
    - INSUFFICIENT  ARGUMENTS  ( недостаточное количество аргу-
ментов ):  означает, что функция, требующая по крайней мере од-
ного аргумента,  вызывается без аргументов.  Функциями, которые
могут вызвать этот тип ошибки, являются: MAX,MIN,-,/,ADD1,SUB1,
LCM,ABS,SIGNUM,NUMERATOR,DENOMINATOR,FLOOR,CEILING,TRUNCATE,
ROUND,MJD,REM,DIVIDE,LOGNOT,BITLENGTH и SHIFT;
    - INSUFFICIENT MEMORY,  ABORTING ( недостаточное количество
памяти, прерывание ): означает, что имеет место нехватка памяти
для  загрузки  и  функционирования среды muLISP.  Работа muLISP
приостанавливается, и управление возвращается к управляющей ОС.
    Отметим, что среда muLISP,  сохраняемая в SYS-файле,  может
быть загружена в ЭВМ, имеющую меньший обьем памяти, чем ЭВМ, на
которой эта среда была создана.  Ошибка по нехватке памяти воз-
никает только тогда,  когда ЭВМ, на которой SYS-файл был загру-
жен, не обладает достаточным объемом памяти для размещения сре-
ды  muLISP.  Единственный  путь  загрузки  SYS-файлов   -   это
получение большего объема памяти для ЭВМ.
    - MEMORY FULL ( память вся ): означает, что памяти для про-
должения  выполнения  программ  muLISP  не хватает.  Выполнение
программ приостанавливается,  и возникает прерывание по ошибке.
    - NONINTEGER ARGUMENT ( нецелый аргумент ):  означает,  что
функция, требующая целых аргументов, вызвана с нецелым аргумен-
том.  Функции,  для которых эта ошибка может встретиться,  это:
LOGAND, LOGIOR, LOGXOR, LOGNOT, SHIFT и BITLENGTH;
    - NONINTEGER  ARGUMENT  ( нечисловой аргумент ):  означает,
что функция,  требующая числовых аргументов, вызвана с нечисло-
вым  аргументом.  Такая  ошибка  может возникнуть для следующих
функций:=,  /=, <, >, <=, >=, MAX, MIN, +, -, *, /, ADD1, SUB1,
INCQ,  DECQ,  GCD,  LCM,  ABC,  SIGNUM, NUMERATOR, DENOMINATOR,
FLOOR, CEILING, TRUNCATE, ROUND, MOD, REM и DIVIDE;

                            - 17 -
    - NONSYMBOLIC ARGUMTNT ( несимвольный аргумент ): означает,
что функция,  требующая символьных аргументов, вызвана с несим-
вольным  аргументом.  К  таким функциям относятся:  SET,  SETQ,
PSETQ, POP, PUSH, INCQ и DECQ;
    - SYNTAX  ERROR  ( синтаксическая ошибка ):  означает,  что
функция READ встретила либо лишние правые скобки,  либо  неточ-
ность в точечном изображении,  например, (A.) или (AB.CD). Т.к.
прерывание по данной ошибке генерируется макросом правых скобок
или запятых, оно может быть модифицировано пользователем-проек-
тировщиком;
    - UNDIFINED  FUNCTION ( неопределенная функция ): означает,
что была сделана попытка использования символа, не имеющего оп-
ределения функции.
    - ZERO DIVIDE ( деление на 0 ):  означает, что была вызвана
функция  деления  с  нулевым делителем.  Такими функциями могут
быть: /, FLOOR, CEILING, TRUNCATE, ROUND, MOD, REM и DIVIDE.

                 3.2    2Работа со стеком

    POP [symbol]        Special form

    POP возвращает "верхушку" (т.е. car) "стека" (т.е. списка),
который  называется <символ>,  и заменяет значение <символа> на
оставшуюся часть (т.е.  cdr) стека.  Если <символ> не  является
символом, то возникает прерывание по ошибке "Несимвольный аргу-
мент". Если значение <символа> - не cons, POP возвращает NIL.
    Данная специальная форма - это LISP-аналог выражения на ма-
шинном языке,  предназначенного для выборки информации из "вер-
хушки" стека.
              Пример:

              (SETQ STACK-LIST '(A B C D E F)) --> (A B C D E F)
              (POP STACK-LIST)                 --> A
              (POP STACK-LIST)                 --> B
              (POP STACK-LIST)                 --> C
              STACK-LIST                       --> (D E F)

    PUSH [form,symbol]     Special form

    (PUSH форма  символ)  оценивает   <форму>,   "проталкивает"
результат в стек (т.е.  в <символ>) и заменяет значение <симво-
ла> на увеличенный стек. PUSH возвращает увеличенный стек (т.е.
список). Если <символ> не является символом, возникает прерыва-
ние по ошибке "Несимвольный аргумент".
    Данная специальная форма - это LISP-аналог выражения на ма-
шинном языке,  предназначенного  для  размещения  информации  в
"верхушке" стека.
              Пример:

              (SETQ STACK-LIST NIL)       --> NIL
              (PUSH 'A STACK-LIST)        --> (A)
              (PUSH 'B STACK-LIST)        --> (B A)
              (PUSH 'C STACK-LIST)        --> (C B A)
              STACK-LIST                  --> (C B A)

                 3.3    2Функции свойств

    Функции свойств предназначены  для  управления  свойствами,
связанными с символами. CDR-элемент символа указывает на список
свойств, содержащий свойства и флаги (см. раздел 5.9).
    Список свойств  -  это  ASSOC-список  (ASSOCiation)  ключей
свойств,  объединенных в пары со значениями свойств. Т.к. флаги

                            - 18 -
- это атомы в списке свойств,  они могут отличаться от свойств.
    Функции свойств и флагов облегчают процесс построения дина-
мических баз данных, из которых информация может легко и быстро
выбираться.

     PUT [symbol,key,object]         Function

    (PUT символ ключ объект) помещает в список свойств  <симво-
ла> значение <объекта> согласно указателю <ключ>.
              Пример:

              (PUT 'USA 'CAPITAL 'WASHINGTON)     --> WASHINGTON
              (PUT 'FRANCE 'CAPITAL 'PARIS)       --> PARIS
              (PUT 'JAPAN 'CAPITAL 'TOKYO)        --> TOKYO


    GET [symbol,key]       Function

    (GET символ  ключ) возвращает значение свойства,  соответс-
твующее <символу>,  согласно указателю <ключ>. Если такого ука-
зателя  не существует,  GET возвращает NIL.  В приведенном ниже
примере предполагается, что была выполнена команда PUT.
              Пример:

              (GET 'FRANCE 'CAPITAL)        --> PARIS
              (GET 'USA 'CAPITAL)           --> WASHINGTON
              (GET 'AUSTRIA 'CAPITAL)       --> NIL


              REMPROP [symbol,key]       Function

    (REMPROP символ ключ) удаляет из списка  свойств  <символа>
свойство,  соответствующее  <ключу>.  REMPROP возвращает старое
значение свойства,  если оно найдено, в противном случае - NIL.
    В примере  предполагается,  что приведенные выше действия с
функцией PUT выполнены.
              Пример:

              (REMPROP 'USA 'CAPITAL)       --> WASHINGTON
              (GET 'FRANCE 'CAPITAL)        --> PARIS
              (GET 'USA 'CAPITAL)           --> NIL

           3.4   2Побитовые  логические  функции

    Побитовые логические функции, рассматриваемые в данном раз-
деле,  работают только с целыми числами.  Если они вызываются с
нецелыми  аргументами,  возникает прерывание по ошибке "Нецелый
аргумент".

              LOGAND [n1,n2,...,nM]       Function

    (LOGAND n1 n2 ... nM) возвращает результат выполнения поби-
тового логического "И" над целыми числами <n1>, ..., <nM>. Если
LOGAND вызывается без аргументов, функция выдает "-1" - иденти-
фикатор данной операции.
              Пример:

              (LOGAND 11 6)    --> 2

              LOGIOR [n1,n2,...,nM]       Function

    (LOGIOR n1 n2 ... nM) возвращает результат выполнения поби-

                            - 19 -
тового  логического "ИЛИ" над целыми числами <n1>,  <n2>,  ...,
<nM>. Если LOGIOR вызывается без аргументов, функция выдает 0 -
идентификатор данной функции.
              Пример:

              (LOGIOR 11 6)   --> 15

              LOGXOR [n1,n2,...,nM]       Function

    (LOGXOR n1 n2 ... nM) возвращает результат выполнения поби-
тового  логического исключающего "ИЛИ" (XOR) над целыми числами
<n1>, ..., <nM>. Если LOGXOR вызывается без аргументов, функция
возвращает 0 - идентификатор данной функции.
              Пример:

              (LOGXOR 11 6)   --> 13

              LOGNOT [n]      Function

    (LOGNOT n) возвращает результат выполнения побитового логи-
ческого "НЕ" над <n>.
              Пример:

              (LOGNOT 9)  --> 65526


              SHIFT [n,m]       Function

    Если <m> - положительное,  (SHIFT n m) возвращает результат
сдвига <n> влево на <m> битов.  Если <m> -  отрицательное,  <n>
сдвигается вправо на -<m> битов.
              Пример:

              (SHIFT 5 2)   --> 20
              (SHIFT 5 -2)  --> 1


             3.5    2Контрольные конструкции


              PROGN [form1,form2,...,formN]          Special form

    (PROGN форма1 форма2 ...  формаN) последовательно вычисляет
формы,  начиная с <формы1>,  и выдает значение последней вычис-
ленной формы.
              Пример:

              (PROGN (SETQ NUM1 (+ 2 5))
                     (SETQ NUM2 (* 3 4))
                     ((< NUM1 NUM2)
                          ((MINUSP NUM1)
                               (* 3 NUM2) )
                          (+ NUM1 NUM2) )
                     (- NUM1 NUM2) )        --> 19


              LOOP [form1,form2,...,formN]       Special form

    (LOOP форма1 ...  формаN) повторно вычисляет формы в после-
довательном порядке до тех пор, пока не встретится неявный COND
с предикатом, не равным NIL. Затем LOOP вычисляет тело неявного
COND и возвращает результат.

                            - 20 -
    Механизм вычисления  тела  функции  с помощью неявной PROGN
является довольно мощным,  но он не касается структур  контроля
нерекурсивных программ.  Такая возможность обеспечивается конт-
рольной конструкцией LOOP.  LOOP последовательно вычисляет свои
формы тем же методом, как формы вычисляются в PROGN. Однако ес-
ли все формы в LOOP вычислены,  но не удовлетворяют  каким-либо
условиям, вычисление повторяется, начиная с первой формы.
              Пример:

              (SETQ NUM 5)
              (LOOP ((ZEROP NUM))
                    (PRIN1 NUM)
                    (SPACES 2)
                    (PRINT (*NUM NUM))
                    (DECQ NUM) )
              5  25
              4  16
              3  9
              2  4
              1  1
              T


              PROG1 [form1,form2,...,formN]       Special form

    (PROG1 форма1 ...  формаN) вычисляет <форму1>,  затем - ос-
тавшиеся формы, используя неявную PROGN, и возвращает результат
вычисления <формы1>.  PROG1 часто используют для того, чтобы не
вводить временные переменные для хранения результатов в процес-
се вычисления других выражений.
              Пример:

              (SETQ FOO '(A B C D))                   --> (A B C D)
              (PROG1 (CAR FOO) (SETQ FOO (CDR FOO)))  --> A
              FOO                                     --> (B C D)


              IF [predicate,thenform,elseform]     Special form

    Если значение  <предиката>  есть  не  NIL,   (IF   предикат
then-форма else-форма) вычисляется,  и выдается <then-форма>. В
противном случае вычисляется IF  и  выдается  <else-форма>  или
NIL, если <else-форма> отсутствует.
    Специальная форма IF в LISP аналогична конструкции "if-then
-else" в других языках.
              Пример:

              (IF (EQ (* 2 3) 6) 'TRUE 'FALSE)  --> TRUE
              (IF (EQ (+ 2 3) 6) 'TRUE 'FALSE)  --> FALSE

              COND [cond1,cond2,...,condN]       Special form

    (COND cond1  ...  condN)  вычисляет  car  каждой cond-формы
(т.е. предиката) до тех пор, пока не встретится какое-либо зна-
чение, отличное от NIL, либо пока все предикаты не будут вычис-
лены.  В первом случае COND вычисляет cdr-элемент cons-формы  с
предикатом,  отличным от NIL, как тело функции, используя неяв-
ную PROGN. Если crd-элемент cond-формы, не равной NIL, пуст, то
COND возвращает значение предиката. Если все предикаты были вы-
числены и все возвратили NIL, то COND выдает NIL.
    В muLISP  неявный  COND  значительно уменьшает необходимость
явного использования функции COND. Однако, как показано на при-

                            - 21 -
мере, COND удобен тогда, когда в вызове встроенных функций фор-
мируется утверждение условия.
              Пример:

              (SETQ NUM -3)     --> -3
              (SETQ SIGN (COND ((PLUSP NUM) 'POSITIVE)
                               ((MINUSP NUM) 'NEGATIVE)
                               ((ZEROP NUM) 'ZERO)
                               ('NONNUMBER) ) )   --> NEGATIVE



             3.6   2Функции управления памятью

    Функция RECLAIM управляет работой сборщика мусора и возвра-
щает результирующее количество свободной области  данных.  Т.к.
управление памятью в muLISP полностью автоматизировано, RECLAIM
используется только для определения количества свободной памяти
или перед работой временного теста - для минимизации количества
сборщиков мусора в процессе работы теста.

              RECLAIM [ ]            Function

    (RECLAIM) управляет работой сборщика мусора,  исправляя не-
корректные структуры данных для четырех областей данных muLISP.
Если требуется,  выполняется  также  перераспределение  памяти.
Возвращается  итоговое  число байтов,доступных под области ато-
мов, векторов, указателей и стековые области.


              3.7    2Работа с оперативной памятью

    Функции, которые рассматриваются в данном разделе,  обеспе-
чивают взаимосвязь между программами muLISP,  ТО ЭВМ и ОС  (см.
также Технические рекомендации ЭВМ и руководство по ОС).

              MEMORY [address,value,flag]        Function

    Если <аddress>  (<адрес>)  -  ноль или положительное целое,
меньшее, чем область памяти микропроцессора, на котором работа-
ет muLISP,  (MEMORY адрес) передает байт (т.е. 8-битовое значе-
ние) в <адрес>.
    Если <value>  (<значение>)  - ноль или положительное целое,
меньшее, чем 256, (MEMORY адрес значение) запоминает <значение>
байта по <адресу> и возвращает первоначальное значение байта.
    Если <flag> (<флаг>) - не NIL, (MEMORY адрес значение флаг)
передает слово (т.е. 16-битовое значение) в <адрес>. Если <зна-
чение> - ноль или  положительное  целое,  меньшее,  чем  65536,
(MEMORY  адрес  значение  флаг)  запоминает <значение> слова по
<адресу> и возвращает первоначальное значение слова.
    Предупреждение: MEMORY должна использоваться очень осторож-
но, т.к. отсутствует защита от разрушения интерпретатора muLISP
или руководящей ОС.

               3.8  2Работа с экраном монитора

    Функции экрана  консоли предназначены для выдачи на экран и
форматирования с экрана текста - это функции создания окон, из-
менения  положения курсора и свертки текста.  Переменные экрана
консоли обеспечивают управление такими атрибутами,  как  мерца-
ние,  инверсное  изображение,  яркость и автоматическая свертка
экрана.

                            - 22 -

              SET-CURSOR [row,column]          Function

    (SET-CURSOR строка колонка) перемещает курсор  в  требуемую
строку и колонку экрана и выдает Т.  В противном случае возвра-
щается NIL. На примере показано, как возвратить курсор в исход-
ное положение; при этом в верхнем левом углу окна выдается "Т":
              (SET-CURSOR 0 0)   --> T


              ROW [ ]               Function
              COLUMN [ ]            Function

    (ROW) и (COLUMN) возвращают соответственно положение курсо-
ра в строке и колонке согласно текущему окну.

              CLEAR-SCREEN [ ]      Function

    Если тип  ЭВМ соответствует,  (CLEAR-SCREEN) чистит текущее
окно,  перемещает курсор в верхний левый угол окна (т.е.  в ис-
ходное положение) и возвращает Т.  В противном случае возвраща-
ется NIL.  На примере показано,  как можно почистить экран; при
этом в верхний левый угол выдается Т:
              (CLEAR-SCREEN)   --> T

              INSERT-LINES [n]      Function

    Если тип ЭВМ соответствует,  а <n> - ноль или положительное
целое,  (INSERT-LINES  n)  вставляет <n> чистых строк в текущее
окно, начиная со строки, помеченной курсором, и возвращает T. В
противном случае возвращается NIL.  Новые строки вставляются за
счет свертки нужного количества строк в нижней части окна.

              DELETE-LINES [n]      Function

    Если тип ЭВМ соответствует,  и если <n> - ноль или  положи-
тельное  целое,  (DELETE-LINES n) уничтожает <n> строк текущего
окна, начиная со строки, помеченной курсором, и возвращает Т. В
противном случае возвращается NIL.  Строки уничтожаются за счет
свертки нужного количества строк ниже курсора вверх.

              MAKE-WINDOW [row,column,rows,columns]    Function

    Если тип ЭВМ соответствует,  и  если  <строка>,  <колонка>,
<строки>   и   <колонки>  находятся  в  определенных  пределах,
(MAKE-WINDOW строка колонка строки колонки) создает  на  экране
консоли прямоугольную область как текущее окно, перемещает кур-
сор в верхний левый угол окна и  возвращает  Т.  Верхний  левый
угол окна определяется <строкой> и <колонкой>. Окно имеет шири-
ну <колонок> и высоту <строк>.
    <Строка> должна  быть нулем или положительным целым,  мень-
шим,  чем 25. <Колонка> должна быть нулем или положительным це-
лым,  меньшим,  чем  80.  И <строка>,  и <колонка> по умолчанию
принимаются за 0.  <Строки> должны быть положительными  целыми,
меньшими  или равными 25 минус <строка>.  <Строки> по умолчанию
рассматриваются как 25 минус <строка>.  <Колонки>  должны  быть
положительными целыми меньше или равно 80 минус <колонка>. <Ко-
лонки> по умолчанию рассматриваются как 80 минус <колонка>.
    (MAKE-WINDOW) возвращает  список из 4-х элементов: исходной
строки, исходной колонки, количества строк и количества колонок
текущего  окна.  На  промере показано,  как создается окно в 12
строк и 40 колонок в центре экрана:

                            - 23 -

              (MAKE-WINDOW 6 20 12 40)   --> T

              FOREGROUND-COLOR [n]           Function
              BACKGROUND-COLOR [n]           Function

    Если тип  ЭВМ соответствует,  и если <n> - ноль или положи-
тельное  целое,  меньше,  чем  16,   (FOREGROUND-COLOR   n)   и
(BACKGROUND-COLOR n) устанавливают соответственно тон переднего
и заднего плана в <n> и возвращает  предыдущее  значение.  Если
функция  вызывается  без аргументов,  выдаются текущие значения
тонов.
    Если muLISP работает на IBM PC с монохромным монитором, то
для различных значений <n> на экран дисплея  выдаются следующие
результаты:
     Передний план:     Задний план:    Результат:
     --------------     ------------    ----------
        0                    0          Нет изображения
        1                    0          Подчеркивание
        7                    0          Нормальное изображение
        0                    7          Инверсное изображение

    Если muLISP работает на IBM PC с цветным графическим  дисп-
леем, то различным значениям <n> соответствуют цвета:

0 - черный   4 - красный      8  - темно-серый    12 - светло-красный
1 - синий    5 - фуксиновый   9  - светло-голубой 13 - светлый фуксин
2 - зеленый  6 - коричневый   10 - светло-зеленый 14 - желтый
3 - циановый 7 - светло-серый 11 - светлый циан   15 - белый

       CURSOR-LINES: [start-line,end-line]      Function

    Курсор консоли - это мерцающий пучок света на экране,  сос-
тоящий  из одной или более горизонтальных линий длиной в 1 сим-
вол.  Для машин IBM PC границы начала  и  конца  курсора  могут
устанавливаться  под управлением ПО.  Для монохромного дисплея
курсор может включать в себя  до  14  строк,  для  графического
дисплея - до 8 строк. В любом случае, линии курсора нумеруются,
начиная с 0.
    Если muLISP работает на IBM PC и если <линия-начало> и <ли-
ния-конец> - это неотрицательные целые,  меньше, чем максималь-
ное количество линий курсора для данного монитора, (CURSOR-LINE
линия-начало линия-конец) устанавливает линии  начала  и  конца
курсора и возвращает список,  состоящий из номеров старых линий
начала и конца.
    По окончании  работы  muLISP восстанавливает первоначальную
форму курсора.
          Пример:
      (CURSOR-LINES 0 13)  -->  (12 13) ;Makes cursor a full block

              DISPLAY-PAGE: [n]          Function

    Если muLISP  работает  на IBM PC с графическим дисплеем,  и
если <n>  -  ноль  или  положительное  целое,  меньше,  чем  8,
(DISPLAY-PAGE  n) устанавливает страницу активных работ в <n> и
возвращает   предыдущую   страницу.   В    противном    случае,
DISPLAY-PAGE возвращает текущую display-страницу. Это дает воз-
можность быстро переключаться между  экранами,  полными  текста
(см. Техническое руководство по IBM PC).

   *AUTO-NEWLINE*: '*AUTO-NEWLINE*    Control variable


                            - 24 -
    Если *AUTO-NEWLINE* - не NIL, то непосредственно после сим-
вола, который высвечивается в самой правой колонке текущего ок-
на,  автоматически появляется новая строка. Если *AUTO-NEWLINE*
- NIL,  то новая строка не появляется, а курсор из самой правой
колонки окна убирается.

   *BLINK*: NIL                      Control variable

    Если *BLINK*  - не NIL,  то новые символы на экране дисплея
будут мигать, если NIL - не будут мигать.

   *HIGH-INTENSITY*: NIL             Control variable

    Если *HIGH-INTENSITY* - не NIL, то новые символы будут выс-
вечиваться  с повышенной яркостью;  если NIL - с пониженной яр-
костью (т.е. тускло).
